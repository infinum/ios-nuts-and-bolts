//
//  ConstraintsViewController.swift
//  Catalog
//
//  Created by Infinum on 30.01.2023..
//  Copyright (c) 2023 Infinum. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

var hideTabBar = false

final class ConstraintsViewController: ScrollingViewController {

    // MARK: - Overrides for Scrolling/Custom VC

    override var defaultPresentationStyle: UIModalPresentationStyle? {
        return .fullScreen
    }

    override var horizontalGuide: LayoutGuideKind {
        return .readableWidth
    }

    override var topAndBottomPadding: CGFloat {
        return 8.0
    }

    // MARK: - Public properties -

    var presenter: ConstraintsPresenterInterface!

    var safeAreaIndicatorView: UIView = .init().autoLayoutable()
    var layoutMarginsIndicatorView: UIView = .init().autoLayoutable()
    var readableGuideIndicatorView: UIView = .init().autoLayoutable()

    var bottomFooterView: UIView = .init().autoLayoutable(preservesMargins: true)
    var bottomFooterStackView: UIStackView = .init(axis: .vertical)
    var bottomFooterButton = UIButton(type: .roundedRect)

    var floatingButton = UIButton(frame: .init(origin: .zero, size: .square(80))).autoLayoutable()
    var inlineButton: UIButton = .init(type: .roundedRect)
    var hideFooterButton: UIButton = .init(type: .roundedRect)

    var shortTextlabel: UILabel = .init(
        text: """
        🟢 Safe Area Guide

        🔵 Layout Margins Guide
        -- Custom margins: 24pt on side, 8pt on top/bottom

        🔴 Readable Content Guide (Lines)
        -- Use iPad or iPhone Max in landscape to see readable width.
        -- Its width depends on iOS Accessibility Text Size setting.
        """,
        textColor: .darkGray,
        lines: 0,
        font: .boldSystemFont(ofSize: 15)
    )
    var longTextLabel: UILabel = .init(
        text: Array(
            repeating: "abc a b c aaabbbccc aa bb cc",
            count: UIDevice.current.userInterfaceIdiom == .pad ? 150 : 50
        ).joined(),
        lines: 0,
        font: .systemFont(ofSize: 16)
    )
    var titleLabel: UILabel = .init(
        text: "Layout Guides",
        font: .boldSystemFont(ofSize: 24)
    )

    // MARK: - Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = UIColor(patternImage: UIImage(named: "texture") ?? .init())
        setupSubviews()
    }

    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        floatingButton.roundCornersAsCircle()
        inlineButton.roundCornersAsPill()
        hideFooterButton.roundCornersAsPill()
        readjustConentInset()
    }

    func readjustConentInset() {
        // Scroll view is automatically inseted (non-safe area height).
        // Still, we need to add some more - just the safe area of the bottom footer view.
        scrollView.contentInset.bottom = bottomFooterView.isHidden ? 0 : bottomFooterView.safeAreaLayoutGuide.layoutFrame.height
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        pulseIndicators()
    }

    // MARK: - Setup Layout and Constraints

    override func setupViewLayout() {
        super.setupViewLayout()

        view.layoutMargins = .init(leftRight: 24.0, topBottom: 8.0)
        view.insertSubview(layoutMarginsIndicatorView, at: 0)
        view.insertSubview(safeAreaIndicatorView, at: 0)
        view.insertSubview(readableGuideIndicatorView, at: 0)

        mainStackView.addArrangedSubviews([
            titleLabel,
            shortTextlabel,
            inlineButton,
            hideFooterButton,
            longTextLabel
        ])

        view.addSubview(bottomFooterView)
        bottomFooterView.addSubview(bottomFooterStackView)
        bottomFooterStackView.addArrangedSubview(bottomFooterButton)

        view.addSubview(floatingButton)
    }

    override func setupViewConstraints() -> [NSLayoutConstraint] {
        var constraints = super.setupViewConstraints()
        constraints += safeAreaIndicatorView.constraintsWhichFit(view.safeAreaLayoutGuide)
        constraints += layoutMarginsIndicatorView.constraintsWhichFit(view.layoutMarginsGuide)
        constraints += readableGuideIndicatorView.constraintsWhichFit(
            view.readableContentGuide,
            insets: .topAndBottom(-200)
        )
        constraints += bottomFooterView.constraintsWhichPin(
            bottom: view.bottomAnchor,
            leading: view.leadingAnchor,
            trailing: view.trailingAnchor
        )
        constraints += bottomFooterStackView.constraintsWhichFit(
            bottomFooterView,
            horizontal: .readableWidth,
            vertical: .safeArea,
            insets: .topAndBottom(5)
        )
        constraints += floatingButton.constraintsWhichPin(
            bottom: view.safeAreaLayoutGuide.bottomAnchor,
            trailing: view.safeAreaLayoutGuide.trailingAnchor,
            insets: .onlyAt(bottom: 4, right: 4)
        )
        constraints += floatingButton.constraintsWhichSize(.square(40.0))
        return constraints
    }
}

// MARK: - VIPER Interface And Configure

extension ConstraintsViewController: ConstraintsViewInterface {
}

private extension ConstraintsViewController {

    func configure() {
        let output = Constraints.ViewOutput()

        let input = presenter.configure(with: output)
        print("Configured with input:", input)
    }

}

// MARK: - Private Extensions - Setup Subviews
// You can just ignore these

private extension ConstraintsViewController {

    func setupSubviews() {
        inlineButton.addTarget(self, action: #selector(didPressButton), for: .touchUpInside)
        inlineButton.setTitle("Toggle Navigation Bar", for: .normal)
        inlineButton.backgroundColor = .systemPurple.withAlphaComponent(0.9)
        inlineButton.setTitleColor(.white, for: .normal)

        hideFooterButton.addTarget(self, action: #selector(hideFooter), for: .touchUpInside)
        hideFooterButton.setTitle("Toggle Footer", for: .normal)
        hideFooterButton.backgroundColor = .systemPurple.withAlphaComponent(0.9)
        hideFooterButton.setTitleColor(.white, for: .normal)

        floatingButton.backgroundColor = .systemGreen
        floatingButton.setTitle("+", for: .normal)

        safeAreaIndicatorView.backgroundColor = .systemGreen.withAlphaComponent(0.3)
        safeAreaIndicatorView.roundCorners(corners: .allCorners, radius: 8)

        layoutMarginsIndicatorView.backgroundColor = .systemBlue.withAlphaComponent(0.3)
        layoutMarginsIndicatorView.roundCorners(corners: .allCorners, radius: 8)

        readableGuideIndicatorView.borderColor = .systemRed.withAlphaComponent(0.5)
        readableGuideIndicatorView.borderWidth = 3.0

        bottomFooterView.backgroundColor = .systemYellow.withAlphaComponent(0.4)
        bottomFooterView.borderColor = .systemYellow.withAlphaComponent(0.7)
        bottomFooterView.roundCorners(corners: [.topLeft, .topRight], radius: 12.0)
        bottomFooterView.borderWidth = 1

        bottomFooterButton.setTitle("Continue", for: .normal)
        bottomFooterButton.setTitleColor(.white, for: .normal)
        bottomFooterButton.backgroundColor = .purple.withAlphaComponent(0.8)
        bottomFooterButton.contentEdgeInsets = .allEqual(12)
        bottomFooterButton.roundCorners(corners: .allCorners, radius: 8)
    }

    func pulseIndicators() {
        for view in [safeAreaIndicatorView, layoutMarginsIndicatorView, readableGuideIndicatorView] {
            view.alpha = 2.0
            UIView.animate(withDuration: 3.0, delay: 0, options: [.autoreverse, .repeat]) {
                view.alpha = -8.0
            }
        }
    }

    @objc func didPressButton() {
        guard let navCon = navigationController else { return }
        navCon.setNavigationBarHidden(!navCon.isNavigationBarHidden, animated: true)
    }

    @objc func hideFooter() {
        bottomFooterView.isHidden.toggle()
        readjustConentInset()
    }
}

extension ConstraintsViewController: Catalogizable {
    static var title: String = "Layout Guides and Constraints"
    static var viewController: UIViewController {
        ConstraintsViewController()
    }
}
