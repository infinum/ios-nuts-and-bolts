//
//  CombinePagingViewController.swift
//  Catalog
//
//  Created by Zvonimir Medak on 02.11.2021..
//  Copyright (c) 2021 Infinum. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import Combine
import CombineCocoa

@available(iOS 13, *)
final class CombinePagingViewController: UIViewController, Refreshable {

    // MARK: - Public properties -

    var presenter: CombinePagingPresenterInterface!

    lazy var refreshControl: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        tableView.refreshControl = refreshControl
        return refreshControl
    }()

    // MARK: - Private properties -

    private lazy var tableDataSource: CombineTableDataSourceDelegate = {
        let animation = TableCellAnimationFactory.makeSlideInWithFadeAnimation(duration: 0.5, delay: 0, from: .left)
        return .init(tableView: tableView, animation: animation)
    }()

    @IBOutlet private var tableView: UITableView! {
        didSet {
            tableView.registerClass(cellOfType: PokemonTableViewCell.self)
            tableView.contentInsetAdjustmentBehavior = .never
        }
    }

    private var subscriptions: [AnyCancellable] = []

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configure()
    }

}

// MARK: - Extensions -

@available(iOS 13, *)
extension CombinePagingViewController: CombinePagingViewInterface {

    func configure() {
        let pullToRefresh = refreshControl.isRefreshingPublisher
            .mapToVoid()
            .eraseToAnyPublisher()

        let willDisplayLastCell = tableView.reachedBottomOnceWith(restart: pullToRefresh)

        let output = CombinePagingExample.ViewOutput(
            restart: pullToRefresh,
            willDisplayLastCell: willDisplayLastCell
        )

        let input = presenter.configure(with: output)

        input
            .pokemon
            .handleEvents(receiveOutput: {  [unowned self] _ in
                endRefreshing()
            }, receiveCompletion: { [unowned self] _ in
                endRefreshing()
            })
            .replaceError(with: [])
            .compactMap { $0 }
            .assign(to: \.items, on: tableDataSource)
            .store(in: &subscriptions)

    }
}

@available(iOS 13, *)
extension CombinePagingViewController: Catalogizable {

    static var title: String {
        return "Combine Paging"
    }

    static var viewController: UIViewController {
        return CombinePagingWireframe().viewController
    }

}
