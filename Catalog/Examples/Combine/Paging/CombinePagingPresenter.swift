//
//  CombinePagingPresenter.swift
//  Catalog
//
//  Created by Zvonimir Medak on 02.11.2021..
//  Copyright (c) 2021 Infinum. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import Combine

@available(iOS 13, *)
final class CombinePagingPresenter {

    // MARK: - Private properties -

    private unowned let view: CombinePagingViewInterface
    private let interactor: CombinePagingInteractorInterface
    private let wireframe: CombinePagingWireframeInterface

    // MARK: - Lifecycle -

    init(
        view: CombinePagingViewInterface,
        interactor: CombinePagingInteractorInterface,
        wireframe: CombinePagingWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

@available(iOS 13, *)
extension CombinePagingPresenter: CombinePagingPresenterInterface, PageablePresenter {
    func configure(with output: CombinePagingExample.ViewOutput) -> CombinePagingExample.ViewInput {
        return CombinePagingExample.ViewInput(
            pokemon:
                setupPagination(
                    nextPagePublisher: output.willDisplayLastCell,
                    reloadPublisher: output.restart,
                    nextPage: { [unowned self] container, page in
                        return handleFetchNextData(lastPage: page)
                    },
                    hasNextPage: { container, page in
                        return container.count < (page?.count ?? 0)
                    }
                )
                .map { $0.map { $0 as! Pokemon } }
                .map({ [unowned self] in createPokemonCellItems(pokemon: $0)})
                .eraseToAnyPublisher()
        )
    }
    
    private func createPokemonCellItems(pokemon: [Pokemon]) -> [PokemonTableCellItem] {
        return pokemon.map { PokemonTableCellItem(pokemon: $0) }
    }
    
    private func handleFetchNextData(lastPage: (any Page)?) -> AnyPublisher<any Page, PagingError> {
        
        let url = lastPage?.next?.absoluteString ?? "https://pokeapi.co/api/v2/pokemon?limit=60"
        let router = Router(baseUrl: url, path: "")
        return interactor
            .getPokemon(router: router)
            .mapError { _ in return PagingError.network }
            .map { $0 as (any Page) }
            .eraseToAnyPublisher()
    }
}
