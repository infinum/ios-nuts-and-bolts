//
//  CombineNetworkingPresenter.swift
//  Catalog
//
//  Created by Zvonimir Medak on 29.10.2021..
//  Copyright (c) 2021 Infinum. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import Combine
import Alamofire
import CombineExt

@available(iOS 13, *)
final class CombineNetworkingPresenter {

    // MARK: - Private properties -

    private unowned let view: CombineNetworkingViewInterface
    private let interactor: CombineNetworkingInteractorInterface
    private let wireframe: CombineNetworkingWireframeInterface

    // MARK: - Lifecycle -

    init(
        view: CombineNetworkingViewInterface,
        interactor: CombineNetworkingInteractorInterface,
        wireframe: CombineNetworkingWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
}

// MARK: - Extensions -

@available(iOS 13, *)
extension CombineNetworkingPresenter: CombineNetworkingPresenterInterface {
    func configure(with output: CombineNetworking.ViewOutput) -> CombineNetworking.ViewInput {
        let userInfo = Publishers.CombineLatest(output.email, output.password)

        let didLogin = output
            .login
            .withLatestFrom(userInfo)
            .setFailureType(to: AFError.self)
            .flatMap { [unowned interactor] email, password in
                return interactor
                    .login(email, password)
                    .mapToValue(true)
            }
            .replaceError(with: false)
            .eraseToAnyPublisher()
        
        return CombineNetworking.ViewInput(didLogin: didLogin)
    }

}
